import type {
    Action,
    AssetType,
    Float64Type,
    NameType,
    UInt32Type,
    UInt64Type,
} from '@wharfkit/antelope'
import {ABI, Asset, Blob, Float64, Int64, Name, Struct, UInt32, UInt64} from '@wharfkit/antelope'
import type {ActionOptions, ContractArgs, PartialBy, Table} from '@wharfkit/contract'
import {Contract as BaseContract} from '@wharfkit/contract'
export const abiBlob = Blob.from(
    ''
)
export const abi = ABI.from(abiBlob)
export class Contract extends BaseContract {
    constructor(args: PartialBy<ContractArgs, 'abi' | 'account'>) {
        super({
            client: args.client,
            abi: abi,
            account: args.account || Name.from('atomicmarket'),
        })
    }
    action<T extends ActionNames>(
        name: T,
        data: ActionNameParams[T],
        options?: ActionOptions
    ): Action {
        return super.action(name, data, options)
    }
    table<T extends TableNames>(name: T, scope?: NameType): Table<RowType<T>> {
        return super.table(name, scope, TableMap[name])
    }
}
export interface ActionNameParams {
    acceptbuyo: ActionParams.acceptbuyo
    addafeectr: ActionParams.addafeectr
    addbonusfee: ActionParams.addbonusfee
    addconftoken: ActionParams.addconftoken
    adddelphi: ActionParams.adddelphi
    announceauct: ActionParams.announceauct
    announcesale: ActionParams.announcesale
    assertauct: ActionParams.assertauct
    assertsale: ActionParams.assertsale
    auctclaimbuy: ActionParams.auctclaimbuy
    auctclaimsel: ActionParams.auctclaimsel
    auctionbid: ActionParams.auctionbid
    cancelauct: ActionParams.cancelauct
    cancelbuyo: ActionParams.cancelbuyo
    cancelsale: ActionParams.cancelsale
    convcounters: ActionParams.convcounters
    createbuyo: ActionParams.createbuyo
    declinebuyo: ActionParams.declinebuyo
    delbonusfee: ActionParams.delbonusfee
    init: ActionParams.init
    logauctstart: ActionParams.logauctstart
    lognewauct: ActionParams.lognewauct
    lognewbuyo: ActionParams.lognewbuyo
    lognewsale: ActionParams.lognewsale
    logsalestart: ActionParams.logsalestart
    payauctram: ActionParams.payauctram
    paybuyoram: ActionParams.paybuyoram
    paysaleram: ActionParams.paysaleram
    purchasesale: ActionParams.purchasesale
    regmarket: ActionParams.regmarket
    setmarketfee: ActionParams.setmarketfee
    setminbidinc: ActionParams.setminbidinc
    setversion: ActionParams.setversion
    stopbonusfee: ActionParams.stopbonusfee
    withdraw: ActionParams.withdraw
}
export namespace ActionParams {
    export namespace Type {}
    export interface acceptbuyo {
        buyoffer_id: UInt64Type
        expected_asset_ids: UInt64Type[]
        expected_price: AssetType
        taker_marketplace: NameType
    }
    export interface addafeectr {
        bonusfee_id: UInt64Type
        counter_name_to_add: NameType
    }
    export interface addbonusfee {
        fee_recipient: NameType
        fee: Float64Type
        applicable_counter_names: NameType[]
        fee_name: string
    }
    export interface addconftoken {
        token_contract: NameType
        token_symbol: Asset.SymbolType
    }
    export interface adddelphi {
        delphi_pair_name: NameType
        invert_delphi_pair: boolean
        listing_symbol: Asset.SymbolType
        settlement_symbol: Asset.SymbolType
    }
    export interface announceauct {
        seller: NameType
        asset_ids: UInt64Type[]
        starting_bid: AssetType
        duration: UInt32Type
        maker_marketplace: NameType
    }
    export interface announcesale {
        seller: NameType
        asset_ids: UInt64Type[]
        listing_price: AssetType
        settlement_symbol: Asset.SymbolType
        maker_marketplace: NameType
    }
    export interface assertauct {
        auction_id: UInt64Type
        asset_ids_to_assert: UInt64Type[]
    }
    export interface assertsale {
        sale_id: UInt64Type
        asset_ids_to_assert: UInt64Type[]
        listing_price_to_assert: AssetType
        settlement_symbol_to_assert: Asset.SymbolType
    }
    export interface auctclaimbuy {
        auction_id: UInt64Type
    }
    export interface auctclaimsel {
        auction_id: UInt64Type
    }
    export interface auctionbid {
        bidder: NameType
        auction_id: UInt64Type
        bid: AssetType
        taker_marketplace: NameType
    }
    export interface cancelauct {
        auction_id: UInt64Type
    }
    export interface cancelbuyo {
        buyoffer_id: UInt64Type
    }
    export interface cancelsale {
        sale_id: UInt64Type
    }
    export interface convcounters {}
    export interface createbuyo {
        buyer: NameType
        recipient: NameType
        price: AssetType
        asset_ids: UInt64Type[]
        memo: string
        maker_marketplace: NameType
    }
    export interface declinebuyo {
        buyoffer_id: UInt64Type
        decline_memo: string
    }
    export interface delbonusfee {
        bonusfee_id: UInt64Type
    }
    export interface init {}
    export interface logauctstart {
        auction_id: UInt64Type
    }
    export interface lognewauct {
        auction_id: UInt64Type
        seller: NameType
        asset_ids: UInt64Type[]
        starting_bid: AssetType
        duration: UInt32Type
        end_time: UInt32Type
        maker_marketplace: NameType
        collection_name: NameType
        collection_fee: Float64Type
    }
    export interface lognewbuyo {
        buyoffer_id: UInt64Type
        buyer: NameType
        recipient: NameType
        price: AssetType
        asset_ids: UInt64Type[]
        memo: string
        maker_marketplace: NameType
        collection_name: NameType
        collection_fee: Float64Type
    }
    export interface lognewsale {
        sale_id: UInt64Type
        seller: NameType
        asset_ids: UInt64Type[]
        listing_price: AssetType
        settlement_symbol: Asset.SymbolType
        maker_marketplace: NameType
        collection_name: NameType
        collection_fee: Float64Type
    }
    export interface logsalestart {
        sale_id: UInt64Type
        offer_id: UInt64Type
    }
    export interface payauctram {
        payer: NameType
        auction_id: UInt64Type
    }
    export interface paybuyoram {
        payer: NameType
        buyoffer_id: UInt64Type
    }
    export interface paysaleram {
        payer: NameType
        sale_id: UInt64Type
    }
    export interface purchasesale {
        buyer: NameType
        sale_id: UInt64Type
        intended_delphi_median: UInt64Type
        taker_marketplace: NameType
    }
    export interface regmarket {
        creator: NameType
        marketplace_name: NameType
    }
    export interface setmarketfee {
        maker_market_fee: Float64Type
        taker_market_fee: Float64Type
    }
    export interface setminbidinc {
        minimum_bid_increase: Float64Type
    }
    export interface setversion {
        new_version: string
    }
    export interface stopbonusfee {
        bonusfee_id: UInt64Type
    }
    export interface withdraw {
        owner: NameType
        token_to_withdraw: AssetType
    }
}
export namespace Types {
    @Struct.type('COUNTER_RANGE')
    export class COUNTER_RANGE extends Struct {
        @Struct.field(Name)
        counter_name!: Name
        @Struct.field(UInt64)
        start_id!: UInt64
        @Struct.field(UInt64)
        end_id!: UInt64
    }
    @Struct.type('SYMBOLPAIR')
    export class SYMBOLPAIR extends Struct {
        @Struct.field(Asset.Symbol)
        listing_symbol!: Asset.Symbol
        @Struct.field(Asset.Symbol)
        settlement_symbol!: Asset.Symbol
        @Struct.field(Name)
        delphi_pair_name!: Name
        @Struct.field('bool')
        invert_delphi_pair!: boolean
    }
    @Struct.type('TOKEN')
    export class TOKEN extends Struct {
        @Struct.field(Name)
        token_contract!: Name
        @Struct.field(Asset.Symbol)
        token_symbol!: Asset.Symbol
    }
    @Struct.type('acceptbuyo')
    export class acceptbuyo extends Struct {
        @Struct.field(UInt64)
        buyoffer_id!: UInt64
        @Struct.field(UInt64, {array: true})
        expected_asset_ids!: UInt64[]
        @Struct.field(Asset)
        expected_price!: Asset
        @Struct.field(Name)
        taker_marketplace!: Name
    }
    @Struct.type('addafeectr')
    export class addafeectr extends Struct {
        @Struct.field(UInt64)
        bonusfee_id!: UInt64
        @Struct.field(Name)
        counter_name_to_add!: Name
    }
    @Struct.type('addbonusfee')
    export class addbonusfee extends Struct {
        @Struct.field(Name)
        fee_recipient!: Name
        @Struct.field(Float64)
        fee!: Float64
        @Struct.field(Name, {array: true})
        applicable_counter_names!: Name[]
        @Struct.field('string')
        fee_name!: string
    }
    @Struct.type('addconftoken')
    export class addconftoken extends Struct {
        @Struct.field(Name)
        token_contract!: Name
        @Struct.field(Asset.Symbol)
        token_symbol!: Asset.Symbol
    }
    @Struct.type('adddelphi')
    export class adddelphi extends Struct {
        @Struct.field(Name)
        delphi_pair_name!: Name
        @Struct.field('bool')
        invert_delphi_pair!: boolean
        @Struct.field(Asset.Symbol)
        listing_symbol!: Asset.Symbol
        @Struct.field(Asset.Symbol)
        settlement_symbol!: Asset.Symbol
    }
    @Struct.type('announceauct')
    export class announceauct extends Struct {
        @Struct.field(Name)
        seller!: Name
        @Struct.field(UInt64, {array: true})
        asset_ids!: UInt64[]
        @Struct.field(Asset)
        starting_bid!: Asset
        @Struct.field(UInt32)
        duration!: UInt32
        @Struct.field(Name)
        maker_marketplace!: Name
    }
    @Struct.type('announcesale')
    export class announcesale extends Struct {
        @Struct.field(Name)
        seller!: Name
        @Struct.field(UInt64, {array: true})
        asset_ids!: UInt64[]
        @Struct.field(Asset)
        listing_price!: Asset
        @Struct.field(Asset.Symbol)
        settlement_symbol!: Asset.Symbol
        @Struct.field(Name)
        maker_marketplace!: Name
    }
    @Struct.type('assertauct')
    export class assertauct extends Struct {
        @Struct.field(UInt64)
        auction_id!: UInt64
        @Struct.field(UInt64, {array: true})
        asset_ids_to_assert!: UInt64[]
    }
    @Struct.type('assertsale')
    export class assertsale extends Struct {
        @Struct.field(UInt64)
        sale_id!: UInt64
        @Struct.field(UInt64, {array: true})
        asset_ids_to_assert!: UInt64[]
        @Struct.field(Asset)
        listing_price_to_assert!: Asset
        @Struct.field(Asset.Symbol)
        settlement_symbol_to_assert!: Asset.Symbol
    }
    @Struct.type('auctclaimbuy')
    export class auctclaimbuy extends Struct {
        @Struct.field(UInt64)
        auction_id!: UInt64
    }
    @Struct.type('auctclaimsel')
    export class auctclaimsel extends Struct {
        @Struct.field(UInt64)
        auction_id!: UInt64
    }
    @Struct.type('auctionbid')
    export class auctionbid extends Struct {
        @Struct.field(Name)
        bidder!: Name
        @Struct.field(UInt64)
        auction_id!: UInt64
        @Struct.field(Asset)
        bid!: Asset
        @Struct.field(Name)
        taker_marketplace!: Name
    }
    @Struct.type('auctions_s')
    export class auctions_s extends Struct {
        @Struct.field(UInt64)
        auction_id!: UInt64
        @Struct.field(Name)
        seller!: Name
        @Struct.field(UInt64, {array: true})
        asset_ids!: UInt64[]
        @Struct.field(UInt32)
        end_time!: UInt32
        @Struct.field('bool')
        assets_transferred!: boolean
        @Struct.field(Asset)
        current_bid!: Asset
        @Struct.field(Name)
        current_bidder!: Name
        @Struct.field('bool')
        claimed_by_seller!: boolean
        @Struct.field('bool')
        claimed_by_buyer!: boolean
        @Struct.field(Name)
        maker_marketplace!: Name
        @Struct.field(Name)
        taker_marketplace!: Name
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Float64)
        collection_fee!: Float64
    }
    @Struct.type('balances_s')
    export class balances_s extends Struct {
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Asset, {array: true})
        quantities!: Asset[]
    }
    @Struct.type('bonusfees_s')
    export class bonusfees_s extends Struct {
        @Struct.field(UInt64)
        bonusfee_id!: UInt64
        @Struct.field(Name)
        fee_recipient!: Name
        @Struct.field(Float64)
        fee!: Float64
        @Struct.field(COUNTER_RANGE, {array: true})
        counter_ranges!: COUNTER_RANGE[]
        @Struct.field('string')
        fee_name!: string
    }
    @Struct.type('buyoffers_s')
    export class buyoffers_s extends Struct {
        @Struct.field(UInt64)
        buyoffer_id!: UInt64
        @Struct.field(Name)
        buyer!: Name
        @Struct.field(Name)
        recipient!: Name
        @Struct.field(Asset)
        price!: Asset
        @Struct.field(UInt64, {array: true})
        asset_ids!: UInt64[]
        @Struct.field('string')
        memo!: string
        @Struct.field(Name)
        maker_marketplace!: Name
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Float64)
        collection_fee!: Float64
    }
    @Struct.type('cancelauct')
    export class cancelauct extends Struct {
        @Struct.field(UInt64)
        auction_id!: UInt64
    }
    @Struct.type('cancelbuyo')
    export class cancelbuyo extends Struct {
        @Struct.field(UInt64)
        buyoffer_id!: UInt64
    }
    @Struct.type('cancelsale')
    export class cancelsale extends Struct {
        @Struct.field(UInt64)
        sale_id!: UInt64
    }
    @Struct.type('config_s')
    export class config_s extends Struct {
        @Struct.field('string')
        version!: string
        @Struct.field(UInt64)
        sale_counter!: UInt64
        @Struct.field(UInt64)
        auction_counter!: UInt64
        @Struct.field(Float64)
        minimum_bid_increase!: Float64
        @Struct.field(UInt32)
        minimum_auction_duration!: UInt32
        @Struct.field(UInt32)
        maximum_auction_duration!: UInt32
        @Struct.field(UInt32)
        auction_reset_duration!: UInt32
        @Struct.field(TOKEN, {array: true})
        supported_tokens!: TOKEN[]
        @Struct.field(SYMBOLPAIR, {array: true})
        supported_symbol_pairs!: SYMBOLPAIR[]
        @Struct.field(Float64)
        maker_market_fee!: Float64
        @Struct.field(Float64)
        taker_market_fee!: Float64
        @Struct.field(Name)
        atomicassets_account!: Name
        @Struct.field(Name)
        delphioracle_account!: Name
    }
    @Struct.type('convcounters')
    export class convcounters extends Struct {}
    @Struct.type('counters_s')
    export class counters_s extends Struct {
        @Struct.field(Name)
        counter_name!: Name
        @Struct.field(UInt64)
        counter_value!: UInt64
    }
    @Struct.type('createbuyo')
    export class createbuyo extends Struct {
        @Struct.field(Name)
        buyer!: Name
        @Struct.field(Name)
        recipient!: Name
        @Struct.field(Asset)
        price!: Asset
        @Struct.field(UInt64, {array: true})
        asset_ids!: UInt64[]
        @Struct.field('string')
        memo!: string
        @Struct.field(Name)
        maker_marketplace!: Name
    }
    @Struct.type('declinebuyo')
    export class declinebuyo extends Struct {
        @Struct.field(UInt64)
        buyoffer_id!: UInt64
        @Struct.field('string')
        decline_memo!: string
    }
    @Struct.type('delbonusfee')
    export class delbonusfee extends Struct {
        @Struct.field(UInt64)
        bonusfee_id!: UInt64
    }
    @Struct.type('init')
    export class init extends Struct {}
    @Struct.type('logauctstart')
    export class logauctstart extends Struct {
        @Struct.field(UInt64)
        auction_id!: UInt64
    }
    @Struct.type('lognewauct')
    export class lognewauct extends Struct {
        @Struct.field(UInt64)
        auction_id!: UInt64
        @Struct.field(Name)
        seller!: Name
        @Struct.field(UInt64, {array: true})
        asset_ids!: UInt64[]
        @Struct.field(Asset)
        starting_bid!: Asset
        @Struct.field(UInt32)
        duration!: UInt32
        @Struct.field(UInt32)
        end_time!: UInt32
        @Struct.field(Name)
        maker_marketplace!: Name
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Float64)
        collection_fee!: Float64
    }
    @Struct.type('lognewbuyo')
    export class lognewbuyo extends Struct {
        @Struct.field(UInt64)
        buyoffer_id!: UInt64
        @Struct.field(Name)
        buyer!: Name
        @Struct.field(Name)
        recipient!: Name
        @Struct.field(Asset)
        price!: Asset
        @Struct.field(UInt64, {array: true})
        asset_ids!: UInt64[]
        @Struct.field('string')
        memo!: string
        @Struct.field(Name)
        maker_marketplace!: Name
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Float64)
        collection_fee!: Float64
    }
    @Struct.type('lognewsale')
    export class lognewsale extends Struct {
        @Struct.field(UInt64)
        sale_id!: UInt64
        @Struct.field(Name)
        seller!: Name
        @Struct.field(UInt64, {array: true})
        asset_ids!: UInt64[]
        @Struct.field(Asset)
        listing_price!: Asset
        @Struct.field(Asset.Symbol)
        settlement_symbol!: Asset.Symbol
        @Struct.field(Name)
        maker_marketplace!: Name
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Float64)
        collection_fee!: Float64
    }
    @Struct.type('logsalestart')
    export class logsalestart extends Struct {
        @Struct.field(UInt64)
        sale_id!: UInt64
        @Struct.field(UInt64)
        offer_id!: UInt64
    }
    @Struct.type('marketplaces_s')
    export class marketplaces_s extends Struct {
        @Struct.field(Name)
        marketplace_name!: Name
        @Struct.field(Name)
        creator!: Name
    }
    @Struct.type('payauctram')
    export class payauctram extends Struct {
        @Struct.field(Name)
        payer!: Name
        @Struct.field(UInt64)
        auction_id!: UInt64
    }
    @Struct.type('paybuyoram')
    export class paybuyoram extends Struct {
        @Struct.field(Name)
        payer!: Name
        @Struct.field(UInt64)
        buyoffer_id!: UInt64
    }
    @Struct.type('paysaleram')
    export class paysaleram extends Struct {
        @Struct.field(Name)
        payer!: Name
        @Struct.field(UInt64)
        sale_id!: UInt64
    }
    @Struct.type('purchasesale')
    export class purchasesale extends Struct {
        @Struct.field(Name)
        buyer!: Name
        @Struct.field(UInt64)
        sale_id!: UInt64
        @Struct.field(UInt64)
        intended_delphi_median!: UInt64
        @Struct.field(Name)
        taker_marketplace!: Name
    }
    @Struct.type('regmarket')
    export class regmarket extends Struct {
        @Struct.field(Name)
        creator!: Name
        @Struct.field(Name)
        marketplace_name!: Name
    }
    @Struct.type('sales_s')
    export class sales_s extends Struct {
        @Struct.field(UInt64)
        sale_id!: UInt64
        @Struct.field(Name)
        seller!: Name
        @Struct.field(UInt64, {array: true})
        asset_ids!: UInt64[]
        @Struct.field(Int64)
        offer_id!: Int64
        @Struct.field(Asset)
        listing_price!: Asset
        @Struct.field(Asset.Symbol)
        settlement_symbol!: Asset.Symbol
        @Struct.field(Name)
        maker_marketplace!: Name
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Float64)
        collection_fee!: Float64
    }
    @Struct.type('setmarketfee')
    export class setmarketfee extends Struct {
        @Struct.field(Float64)
        maker_market_fee!: Float64
        @Struct.field(Float64)
        taker_market_fee!: Float64
    }
    @Struct.type('setminbidinc')
    export class setminbidinc extends Struct {
        @Struct.field(Float64)
        minimum_bid_increase!: Float64
    }
    @Struct.type('setversion')
    export class setversion extends Struct {
        @Struct.field('string')
        new_version!: string
    }
    @Struct.type('stopbonusfee')
    export class stopbonusfee extends Struct {
        @Struct.field(UInt64)
        bonusfee_id!: UInt64
    }
    @Struct.type('withdraw')
    export class withdraw extends Struct {
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Asset)
        token_to_withdraw!: Asset
    }
}
export const TableMap = {
    auctions: Types.auctions_s,
    balances: Types.balances_s,
    bonusfees: Types.bonusfees_s,
    buyoffers: Types.buyoffers_s,
    config: Types.config_s,
    counters: Types.counters_s,
    marketplaces: Types.marketplaces_s,
    sales: Types.sales_s,
}
export interface TableTypes {
    auctions: Types.auctions_s
    balances: Types.balances_s
    bonusfees: Types.bonusfees_s
    buyoffers: Types.buyoffers_s
    config: Types.config_s
    counters: Types.counters_s
    marketplaces: Types.marketplaces_s
    sales: Types.sales_s
}
export type RowType<T> = T extends keyof TableTypes ? TableTypes[T] : any
export type ActionNames = keyof ActionNameParams
export type TableNames = keyof TableTypes
